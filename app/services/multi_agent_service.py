import pandas as pd
import logging
from typing import Optional
from app.services.chat_service import ChatService
from app.services.qdrant_service import QdrantService
from app.models.chat import Message

log = logging.getLogger(__name__)

class MultiAgentService:
    def __init__(self):
        self.base_service = ChatService()
        self.qdrant = QdrantService()

    # --- Lecture g√©n√©rique CSV ---
    def load_csv(self, path: str, sep=";", parse_dates=None) -> Optional[pd.DataFrame]:
        try:
            return pd.read_csv(path, sep=sep, parse_dates=parse_dates, dayfirst=True)
        except Exception as e:
            log.error(f"Erreur lecture {path}: {e}")
            return None

    # --- Lecture CSV m√©t√©o ---
    def load_weather(self, csv_path: str, date: str) -> str:
        df = self.load_csv(csv_path, parse_dates=["datetime"], sep = ',')
        if df is None:
            return "‚ö†Ô∏è Impossible de lire les donn√©es m√©t√©o."
        df_day = df[df["datetime"].dt.date.astype(str) == date]
        if df_day.empty:
            return f"Aucune donn√©e m√©t√©o pour {date}."
        return "\n".join(
            f"{row['datetime'].strftime('%H:%M')} - {row['weather']} ({row['temperature']}¬∞C)"
            for _, row in df_day.iterrows()
        )

    # --- Lecture CSV √©v√©nements ---
    def load_events(self, csv_path: str, date: str) -> str:
        df = self.load_csv(csv_path, parse_dates=["date"])
        if df is None:
            return "‚ö†Ô∏è Impossible de lire les √©v√©nements."
        df_day = df[df["date"].dt.date.astype(str) == date]
        if df_day.empty:
            return f"Aucun √©v√©nement pr√©vu le {date}."
        return "\n".join(
            f"üé≠ {row.get('titre', 'Sans titre')} "
            f"(Lieu: {row.get('lieu', 'Non pr√©cis√©')}, "
            f"Affluence: {row.get('affluence', 'Non pr√©cis√©e')}, "
            f"Dur√©e: {row.get('duree_de_visite', 'Non pr√©cis√©e')})"
            for _, row in df_day.iterrows()
        )

    # --- Lecture CSV suppl√©mentaires ---
    def load_boutique(self, path="data/prdt_boutique.csv") -> list[str]:
        df = self.load_csv(path)
        if df is None: return []
        return [f"{row['Nom_produit']} ({row['tarif']})" for _, row in df.iterrows()]

    def load_expos(self, path="data/expo.csv") -> list[str]:
        df = self.load_csv(path, parse_dates=["date"])
        if df is None: return []
        return [f"üñºÔ∏è {row['nom_exposition']} ({row['periode']})" for _, row in df.iterrows()]

    def load_activites_famille(self, path="data/activ_famille.csv") -> list[str]:
        df = self.load_csv(path)
        if df is None: return []
        return [f"{row['nom_activite']} - {row['type_activite']} ({row['tarif']})" for _, row in df.iterrows()]

    def load_restos(self, path="data/resto.csv") -> list[str]:
        df = self.load_csv(path)
        if df is None: return []
        return [f"üçΩÔ∏è {row['nom_restaurant']} ({row['type_offre']} ‚Äì {row['tarif_moyen']})" for _, row in df.iterrows()]

    def load_logements(self, path="data/logement.csv") -> list[str]:
        df = self.load_csv(path)
        if df is None: return []
        return [
            f"üè® {row['nom_logement']} ({row['tarif_moyen']}, {row['proximit√©_chateau']}, "
            f"Adapt√© PMR: {row.get('adapt√©_PMR', 'Non pr√©cis√©')})"
            for _, row in df.iterrows()
        ]
    # --- Lecture CSV billetterie ---
    def load_billetterie(self, csv_path: str) -> str:
        try:
            df = pd.read_csv(csv_path, sep=";")
            df.columns = df.columns.str.strip()

            rows = []
            for _, row in df.iterrows():
                rows.append(
                    f"üéüÔ∏è {row.get('titre_activite', 'Sans titre')} "
                    f"(Type: {row.get('type_evenement', 'Non pr√©cis√©')}, "
                    f"Affluence: {row.get('affluence_domaine', 'Non pr√©cis√©e')}, "
                    f"Tarif plein: {row.get('tarif_adultes_plein', 'Non pr√©cis√©')}, "
                    f"Tarif r√©duit: {row.get('tarif_reduit_supp', 'Non pr√©cis√©')}, "
                    f"Dur√©e estim√©e: {row.get('duree_estimee', 'Non pr√©cis√©e')})"
                )
            return "\n".join(rows)
        except Exception as e:
            log.error(f"Erreur lecture billetterie: {e}")
            return "‚ö†Ô∏è Impossible de charger les donn√©es billetterie."


    # --- Agents ---
    async def profiling_agent(self, user_input: str) -> str:
        system_prompt = Message(
            role="system",
            content=(
                "Tu es un expert en profiling touristique et un sp√©cialiste de la programmation du Ch√¢teau de Versailles. "
                "Ton r√¥le est de cr√©er un profil d√©taill√© pour l'utilisateur, puis de lui proposer des recommandations cibl√©es. "
                "Tu disposes des informations suivantes sur le Domaine de Versailles (√©v√©nements, tarifs, activit√©s, logistique, transport) : "
                "1. **Billets & Tarifs (G√©n√©rique)**: Passeport (32‚Ç¨), Billet Ch√¢teau (21‚Ç¨), Billet Trianon (12‚Ç¨), forfaits VR (d√®s 35‚Ç¨), Abonnements (d√®s 65‚Ç¨). Les visites guid√©es co√ªtent 10‚Ç¨ en suppl√©ment du billet d'entr√©e. "
                "2. **Logistique** : Le Ch√¢teau et Trianon sont ferm√©s le lundi. Les Jardins/Parc sont ouverts tous les jours. "
                "3. **Adaptabilit√©** : Le Parc est accessible aux PMR. Des fauteuils roulants sont pr√™t√©s gratuitement pour les int√©rieurs. Les activit√©s 'Famille' sont adapt√©es aux enfants. "
                "4. **Restauration** : Tu as la liste des restaurants (ore, Angelina, La Flottille, La Petite Venise) et des forfaits repas combin√©s. "
                "5. **√âv√©nements (Exemples)**: Grandes Eaux/Jardins Musicaux (avril-octobre), Expositions temporaires (ex: Le Grand Dauphin, Versailles et Marly sous terre, etc.), Visites Famille/Tout-Petit. "
                "6. **Transport** : Tu as la liste des transports disponible dans le chateau avec (le nom du transport, le type de transport, les tarifs et si il est adapt√©_PMR). "
                
                "**Processus d'Analyse et de Recommandation :**"
                "1. **Analyse du profil** : D√©termine le type de client (famille, couple, solo, groupe scolaire, etc.) et ses centres d'int√©r√™t (histoire, jardins, √©v√©nements sp√©cifiques, luxe, budget). "
                "2. **Recommandation de Billet** : Propose le billet le plus adapt√© au profil (ex: 'Passeport' pour un acc√®s complet; 'Billet Ch√¢teau' pour un budget serr√©; 'Billet Trianon' pour Marie-Antoinette/Jardins). "
                "3. **Recommandation d'Activit√©** : Propose 1 √† 2 activit√©s sp√©cifiques bas√©es sur le profil et la p√©riode (ex: Visite cont√©e pour Famille; Op√©ra ou Quiz pour soir√©es/√©v√©nements). "
                
                "‚ö†Ô∏è **Hypoth√®se par d√©faut** : Si l‚Äôutilisateur ne donne pas assez d‚Äôinformations, consid√®re-le comme un visiteur adulte g√©n√©rique, int√©ress√© par l'histoire du Ch√¢teau et avec un budget mod√©r√©."
            )

        )
        reply, _ = await self.base_service.generate([
            system_prompt, Message(role="user", content=user_input or "Pas d'indication donn√©e")
        ])
        return reply

    async def constraints_agent(self, persona: str, weather: str, events: str) -> str:
        system_prompt = Message(
            role="system",
            content = (
                        "Tu es un expert en gestion et optimisation des contraintes de visite au Ch√¢teau de Versailles. "
                "Tu dois analyser la date de visite et g√©n√©rer une synth√®se claire des contraintes √† anticiper. "
                
                "**Donn√©es √† int√©grer (pour la date demand√©e) :**"
                "1. **M√©t√©o et Temp√©rature** : Analyse les temp√©ratures minimales et maximales attendues. "
                "2. **Affluence** : D√©termine l'affluence anticip√©e pour le Ch√¢teau (soutenue/moyenne/faible) et pour les autres domaines (Trianon, Parc). "
                "3. **Horaires et Fermetures Fixes** : Le Ch√¢teau et le Domaine de Trianon sont **ferm√©s tous les lundis**. Les Jardins et le Parc sont ouverts tous les jours. "
                "4. **Contraintes Saisonni√®res/√âv√©nementielles** : "
                    "a. Jours de **Grandes Eaux Musicales/Jardins Musicaux** (avril-octobre) : L'acc√®s aux Jardins devient **payant**. "
                    "b. Heures de pointe : L'acc√®s au Ch√¢teau est souvent plus dense le matin (Affluence soutenue/moyenne). Encourager les visites les **mercredis, jeudis et vendredis** (jours de moindre affluence). "
                    "c. √âv√©nements sp√©cifiques : Note la pr√©sence d'Op√©ras, de Visites Cont√©es, ou d'Expositions qui pourraient impacter les parcours. La pluie ou d‚Äôautres intemp√©ries n‚Äôengendrent pas l‚Äôannulation de l‚Äô√©v√©nement payant. "
                    "d. **Contrainte Commerciale (Boutique)** : Ne pas oublier de sugg√©rer une visite √† la boutique souvenir √† la fin du parcours, en fonction du budget de l'utilisateur et en proposant des produits adapt√©s au profil (ex: livres/jeux pour enfants, objets de d√©coration pour couple/senior, bijoux pour un cadeau, etc.)."

                "**Contraintes de Pr√©paration et d'Optimisation (R√®gles Logistiques √† Rappeler) :**"
                " * **Mobilit√©/Confort :** Pr√©voir de **bonnes chaussures** car les distances sont importantes (surtout Jardins/Trianon). Il est conseill√© de **consacrer du temps √† l‚Äôensemble du domaine** (Jardins, Trianon, Parc). "
                " * **Accessibilit√©/Handicap :** Informer sur les **conditions de gratuit√© des activit√©s et visites**. Faire la promo des **gratuit√©s et dispositifs sp√©cifiques pour les personnes qui ont un handicap** (sur justificatif). **Pr√™t de fauteuil roulant** au Ch√¢teau uniquement. "
                " * **Poussettes/Animaux :** Les **poussettes sont autoris√©es dans le Ch√¢teau** (il y a des casiers, pas des consignes). Les **chiens et les v√©los ne sont autoris√©s que dans le Parc**. "
                " * **Audioguide/Appli :** Recommander d'**apporter des √©couteurs**. Encourager le **t√©l√©chargement gratuit de l‚Äôapplication en amont** (lancer le chargement des parcours audio avant d‚Äôarriver sur place car les temps de chargement peuvent √™tre longs, pas de Wi-Fi). "
                " * **Visites Guid√©es :** Toujours recommander de **r√©server √† l‚Äôavance** et d'**arriver en avance**. "
                " * **Abonnement :** Rappeler l'option **‚ÄúUn an √† Versailles‚Äù** si le visiteur pense venir **2 fois ou plus dans l‚Äôann√©e**. "
                " * **Transport Interne :** Mettre en avant le Petit Train (**encourag√© pour Trianon**, **billets aller-retour prioritaires √† Trianon**, CB possible, 1er d√©part 11h10) ou les voiturettes √©lectriques (si le budget le permet). Si la m√©t√©o le permet, encourager les services dans le parc avec les **v√©los, les barques et les balades au bord du canal**."

                "**R√®gles Sp√©cifiques Jardins/Saisonnalit√© :**"
                " * **Jardins Payants (Avril-Octobre) :** Rappeler la diff√©rence entre Grandes Eaux et Jardins Musicaux. Attention, quand les jardins sont payants, on ne peut entrer dans les jardins que **2 fois et par 2 entr√©es diff√©rentes** (pas 2 fois par la m√™me entr√©e). "
                " * **Fermeture Jardins :** V√©rifier les horaires. Rappeler qu'en haute saison, les samedis de juin √† septembre et certains jours, les jardins ferment de mani√®re anticip√©e, √† **17h30**. "
                " * **Grandes Eaux Nocturnes (Weekends d'√©t√©) :** Faire la promotion de cet √©v√©nement. Rappeler que les jardins ferment √† **17h30** avant de rouvrir √† **20h** pour les Nocturnes, laissant un intervalle pour faire la VR, la S√©r√©nade Royale ou d√Æner en ville. "
                " * **M√©t√©o/Saison (Conseils de Visite) :** "
                    "  - **√ât√© :** Chaleur et forte affluence. Rappeler d'apporter lunettes/chapeaux/gourdes. Penser aux fontaines et √Ælots de fra√Æcheur. "
                    "  - **Automne/Hiver (Novembre-F√©vrier par beau temps) :** Conditions **optimales** pour votre visite (moins d'affluence, programmation riche, plus d'expositions). "
                    "  - **Franciliens/R√©guliers :** Recommander Ch√¢teau + Trianon de septembre √† mars, et Jardins d‚Äôavril √† octobre (printemps particuli√®rement agr√©able)."
                " * **Renouvellement de Visite :** Orienter les r√©ponses vers les **expositions temporaires**, les **visites guid√©es**, les **ateliers familles**, et les **nouveaux espaces** (Trianon, galeries des Carrosses/Sculptures, salle du Jeu de Paume, ouvertures exceptionnelles), qui sont souvent moins connus mais gratuits l'apr√®s-midi, pour les visiteurs r√©guliers."

                "**Synth√®se des Contraintes (Output) :**"
                "Ton objectif final est de fournir une synth√®se des contraintes pour optimiser la visite, en indiquant si la date est : "
                " - **Optimale** (faible affluence, bonne m√©t√©o). "
                " - **Contrainte par l'affluence** (acc√®s Ch√¢teau √† privil√©gier l'apr√®s-midi). "
                " - **Contrainte par les horaires** (Ch√¢teau et Trianon ferm√©s). "
                " - **Contrainte tarifaire** (Jardins payants). "
                "Base-toi sur ces √©l√©ments pour conseiller l'utilisateur sur le meilleur moment pour entrer et le meilleur billet √† acheter. **N'oublie pas d'int√©grer la recommandation pour la boutique souvenir en fonction du profil et du budget.**"
            )

        )
        combined_input = f"Profil: {persona}\n\nM√©t√©o:\n{weather}\n\n√âv√©nements:\n{events}"

        reply, _ = await self.base_service.generate([
            system_prompt, Message(role="user", content=combined_input)
        ])
        return reply

    async def planner_agent(self, user_input: str, profile: str, constraints: str) -> str:
        # Charger toutes les sources additionnelles
        restos = self.load_restos()
        produits = self.load_boutique()
        activites_famille = self.load_activites_famille()
        expos = self.load_expos()
        logements = self.load_logements()
        billetterie_info = self.load_billetterie("data/billeterie.csv")

        # S√©lections limit√©es pour √©viter surcharge
        resto_text = "\n".join(restos[:3]) if restos else "Pas de suggestions restos disponibles."
        produit_text = produits[0] if produits else "Pas de produit trouv√©."
        famille_text = "\n".join(activites_famille[:3]) if "famille" in profile.lower() else ""
        expo_text = "\n".join(expos[:2]) if expos else ""
        logement_text = "\n".join(logements[:3]) if (
            "2 jours" in user_input.lower() or "week-end" in user_input.lower() or "plusieurs jours" in user_input.lower()
        ) else ""

        system_prompt = Message(
            role="system",
            content=(
                "Tu es un **planificateur expert du Ch√¢teau de Versailles**. "
                "Ton r√¥le est d'utiliser le profil du visiteur (recommandations d'activit√©s/billets) et la synth√®se des contraintes (affluence, fermetures, m√©t√©o) pour construire un **itin√©raire horaire d√©taill√© et optimis√© pour la journ√©e**. "
                "Ton plan doit permettre au visiteur de maximiser son temps et d'√©viter les files d'attente."

                "**Principes de Planification :**"
                "1. **Prioriser les contraintes :** Int√®gre les horaires de fermeture (Ch√¢teau/Trianon ferm√©s le lundi), l'heure des √©v√©nements sp√©cifiques (Op√©ra, Visite guid√©e), et les heures de pointe (√©viter l'entr√©e Ch√¢teau de 10h30 √† 13h00 les jours d'affluence). "
                "2. **Logique de parcours :** Les principaux lieux sont le Ch√¢teau, le Domaine de Trianon (Petit Trianon, Hameau de la Reine), les Jardins et le Parc. Le Trianon ouvre √† 12h00. "
                "3. **Optimisation des Billets :** Int√®gre la recommandation de billet dans le plan (ex: 'Passeport' pour un acc√®s complet; 'Billet Ch√¢teau' pour un budget serr√©; 'Billet Trianon' pour Marie-Antoinette/Jardins). "
                "4. **Rythme de Visite :** Adapter la dur√©e de chaque √©tape au profil (ex: moins de marche pour les seniors/PMR; plus de temps de jeu pour les familles; plus de focus culturel pour un visiteur solo/couple passionn√©). "

                "**R√®gles d'Adaptation M√©t√©o et Logistique (Mobilit√© et Confort) :**"
                " - **M√©t√©o (Pluie/Froid/Chaleur) :** "
                    "  - En cas de **pluie ou de froid** (surtout pour les enfants et seniors), **privil√©gier strictement les activit√©s en int√©rieur** (Galerie des Glaces, Grands Appartements, Expositions, VR, Op√©ra). "
                    "  - En cas de **forte chaleur (√©t√©)**, pr√©venir que l'exp√©rience est moins agr√©able. Recommander **lunettes, chapeaux/casquettes et gourdes**. Orienter vers les **√Ælots de fra√Æcheur** et les **fontaines gratuites pour remplir les gourdes**. "
                    "  - **La pluie ou d‚Äôautres intemp√©ries n‚Äôengendrent pas l‚Äôannulation des √©v√©nements** payants. "
                " - **Chaussures/Distance :** **Pr√©voir de bonnes chaussures** est essentiel car les distances sont importantes, surtout pour Trianon et les Jardins. **Il est conseill√© de consacrer du temps √† l‚Äôensemble du domaine.** "
                " - **Poussettes/Sacs :** Les **poussettes sont autoris√©es dans le Ch√¢teau**, il n'y a pas de consignes mais des **casiers** pour les sacs volumineux. **Les chiens et v√©los ne sont autoris√©s que dans le Parc.** "
                " - **Pauses/Toilettes :** Le plan doit **int√©grer des pauses gourmandes ou toilettes r√©guli√®res** (toutes les 1h30 √† 2h) et proposer des lieux de restauration strat√©giques (Angelina, ore, La Flottille, La Petite Venise) qui offrent des commodit√©s imm√©diates."

                "**R√®gles d'Acc√®s, Tarification & Optimisation :**"
                " - **Jours d'affluence :** Encourager les visites les **mercredis, jeudis et vendredis** (jours de moindre affluence). "
                " - **Visites Guid√©es :** Toujours recommander de **r√©server les visites guid√©es √† l‚Äôavance** (car souvent compl√®tes le jour J) et d'**arriver en avance**. Encourager une **visite guid√©e ou une activit√© famille** si pertinent. "
                " - **Jardins Payants (avril-octobre) :** Rappeler la diff√©rence entre **Grandes Eaux** et **Jardins Musicaux**. Quand les jardins sont payants, le visiteur ne peut y entrer que **2 fois par 2 entr√©es diff√©rentes** (pas 2 fois par la m√™me entr√©e). V√©rifier les **horaires de fermeture des jardins** (rappel : fermeture anticip√©e √† 17h30 les samedis de juin √† septembre et certains jours d'√©v√©nements). "
                " - **Nocturnes :** Les weekends d'√©t√©, faire la promotion des **Grandes Eaux Nocturnes**. Les jours de Nocturnes, les jardins ferment √† 17h30 pour rouvrir √† 20h. Proposer la **VR ou la S√©r√©nade Royale** ou un d√Æner en ville dans l'intervalle. "
                " - **Gratuit√©s/Handicap :** **S'informer sur les conditions de gratuit√© des activit√©s et visites.** Faire la promo des **gratuit√©s et dispositifs sp√©cifiques pour les personnes qui ont un handicap** (sur justificatif). Le **pr√™t de fauteuil roulant** est possible au Ch√¢teau uniquement. "
                " - **Espaces Gratuits l'apr√®s-midi :** Mettre en avant les visites originales et gratuites de l‚Äôapr√®s-midi : la **salle du jeu de paume** (mardi au dimanche), la **galerie des carrosses** et la **galerie des Sculptures et Moulages** (uniquement les week-ends), sans r√©servation pr√©alable. "
                " - **Franciliens/Visiteurs R√©guliers :** "
                    "  - **Franciliens :** Recommander le Ch√¢teau + Trianon de septembre √† mars, et les Jardins d‚Äôavril √† octobre (printemps particuli√®rement agr√©able). "
                    "  - **Renouvellement de Visite :** Orient√© les r√©ponses vers les visites guid√©es, ateliers familles, expositions et nouveaux espaces. Rappeler que le Ch√¢teau est en constante √©volution (Trianon, galeries, expositions, ouvertures exceptionnelles comme la salle du Congr√®s) pour les personnes qui sont d√©j√† venues. "
                " - **Abonnement :** Sugg√©rer la carte d‚Äôabonnement **‚ÄúUn an √† Versailles‚Äù** si l'utilisateur envisage de venir **deux fois ou plus dans l‚Äôann√©e**. "
                " - **Services dans le Parc :** Si la m√©t√©o le permet, encourager les services dans le parc avec les **v√©los, les barques** et les **balades au bord du canal**. "
                " - **Petit Train :** **√Ä encourager pour le Trianon**. Billets aller-retour prioritaires, CB possible, premier d√©part 11h10. "
                " - **Voiturette √âlectrique :** Si le budget le permet, recommander l‚Äôoption des **voiturettes √©lectriques**. "
                " - **Sauvegarde de l'itin√©raire :** Apr√®s avoir valid√© l'itin√©raire, l'agent doit offrir la **possibilit√© de t√©l√©charger le plan de visite du Ch√¢teau en format PDF**."

                "**Structure d'Itin√©raire D√©tail√©e (√† produire) :**"
                "Ton plan doit suivre un format horaire, comprenant au minimum ces √©tapes :"
                " - **Matin (9h00 - 12h00) :** Gestion de l'affluence. D√©but de visite (Ch√¢teau ou Jardins, selon les Grandes Eaux/M√©t√©o). "
                " - **Midi (12h00 - 13h30) :** Pause d√©jeuner. Proposer un lieu (Ore, Angelina, Flottille/Petite Venise) adapt√© √† l'emplacement et au budget. "
                " - **D√©but d'Apr√®s-midi (13h30 - 15h30) :** Transition vers le Domaine de Trianon (ouverture 12h00) ou visite du Ch√¢teau si le matin √©tait consacr√© aux Jardins. "
                " - **Fin d'Apr√®s-midi (15h30 - 18h00) :** Exploration des ext√©rieurs (Hameau de la Reine, Parc) ou activit√© sp√©cifique (Visite guid√©e r√©serv√©e, Exp√©rience VR). "
                " - **Fin de Journ√©e (Apr√®s 18h00) :** Sortie du Domaine ou acc√®s √† un √©v√©nement nocturne (Op√©ra, Grandes Eaux Nocturnes, si applicable)."
                
                "**R√®gle de Repli (Cruciale) :** Si tu ne peux pas fournir une r√©ponse compl√®te ou si l'information requise (horaires de derni√®re minute, accessibilit√© PMR d√©taill√©e, disponibilit√© d'une salle sp√©cifique) n'est pas connue ou n'est pas garantie, tu dois terminer ta r√©ponse par l'invitation suivante : "
                "**¬´ Pour toute information non garantie ou pour une question sp√©cifique (horaires de derni√®re minute, accessibilit√© d√©taill√©e), nous vous recommandons vivement de vous renseigner aupr√®s des guides sur place ou de contacter directement le service d'accueil du Ch√¢teau de Versailles au 01 30 83 78 00. ¬ª**"

                "Le plan doit √™tre une s√©quence d'actions claires (ex: '1. Commencez par... / 2. √Ä midi, dirigez-vous vers... / 3. Terminez la visite par...')."
            )

        )

        combined_input = (
            f"Profil: {profile}\n"
            f"Contraintes m√©t√©o & √©v√©nements: {constraints}\n"
            f"Demande: {user_input}\n\n"
            f"Suggestions restaurants:\n{resto_text}\n\n"
            f"Produit boutique: {produit_text}\n\n"
            f"Activit√©s famille: {famille_text}\n\n"
            f"Expositions: {expo_text}\n\n"
            f"Logements: {logement_text}\n\n"
            f"Donn√©es billetterie: {billetterie_info}\n"
        )

        reply, _ = await self.base_service.generate([
            system_prompt, Message(role="user", content=combined_input)
        ])
        return reply


    async def intent_agent(self, user_input: str) -> str:
        system_prompt = Message(
            role="system",
            content=(
                "Tu es un classifieur d'intentions. "
                "Lis attentivement la question et classe-la dans UNE cat√©gorie pr√©cise :\n\n"
                "üëâ 'itinerary' : si l'utilisateur demande un parcours, un programme, une organisation compl√®te de visite "
                "(ex: 'Propose-moi un itin√©raire pour demain', 'Optimise ma journ√©e √† Versailles').\n\n"
                "üëâ 'qa' : si c‚Äôest une question ponctuelle ou factuelle "
                "(ex: 'Quelle est la m√©t√©o ?', 'Y a-t-il des √©v√©nements aujourd'hui ?', 'Combien de temps dure la visite ?').\n\n"
                "üëâ 'doc' : si la question concerne des infos pratiques issues de la base documentaire "
                "(ex: 'Quels sont les tarifs ?', 'O√π acheter un billet ?', 'Y a-t-il un plan du domaine ?').\n\n"
                "üëâ 'lodging' : si la question concerne explicitement les h√¥tels, logements ou h√©bergements "
                "(ex: 'Quels h√¥tels sont proches du ch√¢teau ?', 'Peux-tu me proposer un logement ?').\n\n"
                "‚ö†Ô∏è R√©ponds UNIQUEMENT par l‚Äôun de ces mots-cl√©s : itinerary, qa, doc, lodging."
            )
        )
        reply, _ = await self.base_service.generate([
            system_prompt, Message(role="user", content=user_input)
        ])
        return reply.strip().lower()


    async def concierge_agent(self, user_input: str, profile: str, weather: str, events: str) -> str:
        system_prompt = Message(
            role="system",
            content="Tu es un assistant touristique. R√©ponds simplement √† la question, "
                    "en utilisant si pertinent le profil, la m√©t√©o et les √©v√©nements fournis."
        )
        combined = f"Profil: {profile}\nM√©t√©o: {weather}\n√âv√©nements: {events}\n\nDemande: {user_input}"

        reply, _ = await self.base_service.generate([
            system_prompt, Message(role="user", content=combined)
        ])
        return reply

    async def doc_agent(self, user_input: str, embedding_fn, domain: str = None) -> str:
        if domain is None:
            domain = "pratiques"
            if any(word in user_input.lower() for word in ["tarif", "prix", "billet", "ticket", "r√©duction"]):
                domain = "billetterie"
            elif any(word in user_input.lower() for word in ["plan", "carte", "domaine", "jardin", "acc√®s"]):
                domain = "plan"
            elif any(word in user_input.lower() for word in ["h√¥tel", "hotel", "logement", "h√©bergement"]):
                domain = "logement"

        query_vector = embedding_fn(user_input)
        docs = self.qdrant.search(query_vector, domain=domain, top_k=5)
        context = "\n".join([d.get("text", "") for d in docs]) if docs else "Aucun document trouv√©."

        system = Message(
            role="system",
            content=(
                f"Tu es un assistant documentaire sp√©cialis√© sur le Ch√¢teau de Versailles ({domain}). "
                "R√©ponds uniquement √† partir du contexte fourni ci-dessous. "
                "Si l‚Äôinformation n‚Äôest pas pr√©sente, indique-le clairement."
            )
        )

        combined = f"Contexte:\n{context}\n\nQuestion: {user_input}"

        reply, _ = await self.base_service.generate([
            system, Message(role="user", content=combined)
        ])
        return reply
    
    async def billetterie_agent(self, user_input: str, billetterie_info: str) -> str:
            system_prompt = Message(
                role="system",
                content=(
                    "Tu es un assistant expert de la billetterie du Ch√¢teau de Versailles. "
                    "R√©ponds uniquement √† partir des donn√©es fournies (types d‚Äôactivit√©s, tarifs, r√©ductions, accessibilit√©). "
                    "Ne fais pas d‚Äôinvention."
                )
            )
            combined = f"Donn√©es billetterie:\n{billetterie_info}\n\nQuestion: {user_input}"

            reply, _ = await self.base_service.generate([
                system_prompt, Message(role="user", content=combined)
            ])
            return reply


    async def run(
        self,
        user_input: str,
        date: str,
        weather_csv: str,
        events_csv: str,
        billetterie_csv: str = "data/billeterie.csv",
        hotels_csv: str = "data/logement.csv",
        embedding_fn: Optional[callable] = None
    ) -> dict:
        # Charger m√©t√©o et √©v√©nements
        weather_info = self.load_weather(weather_csv, date)
        events_info = self.load_events(events_csv, date)

        # Profiling et intention
        profile = await self.profiling_agent(user_input)
        intent = await self.intent_agent(user_input)

        if intent == "itinerary":
            constraints = await self.constraints_agent(profile, weather_info, events_info)
            itinerary = await self.planner_agent(user_input, profile, constraints)

            return {
                "mode": "itinerary",
                "itinerary": itinerary   # üëâ on garde uniquement l‚Äôitin√©raire
            }

        elif intent == "qa":
            answer = await self.concierge_agent(user_input, profile, weather_info, events_info)
            return {"mode": "qa", "answer": answer}

        elif intent == "doc" and embedding_fn:
            # V√©rif si la question est sur la billetterie
            if any(word in user_input.lower() for word in ["tarif", "prix", "billet", "ticket", "r√©duction"]):
                billetterie_info = self.load_billetterie(billetterie_csv)
                answer = await self.billetterie_agent(user_input, billetterie_info)
                return {"mode": "doc", "answer": answer, "domain": "billetterie"}
            
            # Sinon : recherche documentaire
            domain = "pratiques"
            if any(word in user_input.lower() for word in ["plan", "carte", "domaine", "jardin", "acc√®s"]):
                domain = "plan"

            answer = await self.doc_agent(user_input, embedding_fn, domain=domain)
            return {"mode": "doc", "answer": answer, "domain": domain}

        else:
            return {"mode": "unknown", "answer": "‚ö†Ô∏è Je n‚Äôai pas compris la demande."}